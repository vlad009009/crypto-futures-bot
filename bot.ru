import os
from aiogram import Bot, Dispatcher, types
from signals import detect_signal

API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
TARGET_ID = os.getenv('TELEGRAM_TARGET_ID')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def cmd_start(m: types.Message):
    await m.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
        "`/signal SYMBOL TIMEFRAME`\n"
        "–ü—Ä–∏–º–µ—Ä: `/signal BTCUSDT 1h`"
    )

@dp.message_handler(commands=['signal'])
async def cmd_signal(m: types.Message):
    parts = m.text.split()
    if len(parts) != 3:
        return await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/signal BTCUSDT 1h`", parse_mode="Markdown")
    _, sym, tf = parts
    sym = sym.upper()
    res = detect_signal(sym, tf)
    if not res:
        return await m.reply("–°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    typ, entry, sl, tps, rsi, ema50, ema200, vol, avg = res
    text = (
        f"üü¢ **{typ} —Å–∏–≥–Ω–∞–ª ‚Äî {sym} ({tf})**\n"
        f"üìç –í—Ö–æ–¥: {entry} / üõë SL: {sl} / üéØ TP: {tps[0]} / {tps[1]} / {tps[2]}\n\n"
        f"üìä _RSI: {rsi:.1f} | EMA50: {ema50:.2f} | EMA200: {ema200:.2f}_\n"
        f"‚Ä¢ –û–±—ä—ë–º: {vol:.0f} (—Å—Ä: {avg:.0f})\n\n"
        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–ª–µ—á–æ –¥–æ x5, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 2‚Äì3%, –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å–≤–µ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è."
    )
    await bot.send_message(m.chat.id, text, parse_mode="Markdown")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp)
